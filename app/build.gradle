buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.21.5'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.github.triplet.play'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}



android {
    dataBinding { enabled = true }
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion "$rootProject.ext.buildToolsVersion"

    defaultConfig {
        applicationId "org.bookdash.android"
        minSdkVersion 16
        targetSdkVersion rootProject.ext.compileSdkVersion
        versionCode rootProject.ext.versionCode
        versionName "$rootProject.ext.versionName"
        testInstrumentationRunner "org.bookdash.android.presentation.CustomTestRunner"
        vectorDrawables.useSupportLibrary = true
        resConfigs "en"

    }



    File signFile = rootProject.file('release-keystore.properties')
    if (signFile.exists()) {
        signingConfigs {
            release {
                def props = new Properties()

                props.load(new FileInputStream(signFile))

                storeFile rootProject.file(props.keyStore)
                storePassword props.keyStorePassword
                keyAlias props.keyAlias
                keyPassword props.keyAliasPassword
            }
        }
        buildTypes.release.signingConfig signingConfigs.release

    }

    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'

        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'LICENSE.txt'
    }

    productFlavors {
        mock {
            applicationIdSuffix ".qa"
        }
        qa {
            applicationIdSuffix ".qa"
        }
        prod {

        }
    }
    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }
    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    buildTypes {
        release {
            shrinkResources false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ext.enableCrashlytics = true
        }
        debug {
            ext.enableCrashlytics = false
            // Run code coverage reports by default on debug builds.
            testCoverageEnabled = true
        }
    }

    play {
        jsonFile = rootProject.file('google-play-keys.json')
        track = "${track}"
    }
}
dependencies {
    debugWearApp project(path: ':watchface', configuration: 'debugApk')
    releaseWearApp project(path: ':watchface', configuration: 'releaseApk')

    testCompile "junit:junit:$rootProject.ext.junitVersion"
    testCompile "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testCompile "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    testCompile("org.powermock:powermock-module-junit4:$rootProject.ext.powerMockito")
    testCompile("org.powermock:powermock-api-mockito:$rootProject.ext.powerMockito")

    // Android Testing Support Library's runner and rules
    androidTestCompile('com.android.support.test.espresso:espresso-web:2.2.1') {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    androidTestCompile("com.android.support.test:runner:$rootProject.ext.runnerVersion") {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    androidTestCompile("com.android.support.test:rules:$rootProject.ext.runnerVersion") {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }

    // Espresso UI Testing
    androidTestCompile("com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion") {
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude group: "javax.inject"

    }
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion") {
        exclude module: 'support-annotations'
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
    androidTestCompile("com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion") {
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    androidTestCompile "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion"
    androidTestCompile "com.android.support:design:$rootProject.ext.supportLibraryVersion"

    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':fabbutton')

    compile "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:cardview-v7:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:palette-v7:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:percent:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:preference-v7:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:preference-v14:$rootProject.ext.supportLibraryVersion"
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.github.castorflex.smoothprogressbar:library-circular:1.2.0'

    compile('com.crashlytics.sdk.android:crashlytics:2.5.3@aar') {
        transitive = true;
    }
    compile('za.co.riggaroo:materialhelptutorial:1.2.0') {
        exclude module: 'support-v4'
    }

    compile("com.google.firebase:firebase-invites:${rootProject.ext.googlePlayServicesVersion}") {
        exclude module: 'support-v4'
    }
    compile("com.google.firebase:firebase-core:${rootProject.ext.googlePlayServicesVersion}") {
        exclude module: 'support-v4'
    }
    compile "com.google.firebase:firebase-database:${rootProject.ext.googlePlayServicesVersion}"
    compile "com.google.firebase:firebase-messaging:${rootProject.ext.googlePlayServicesVersion}"
    compile("com.google.firebase:firebase-config:${rootProject.ext.googlePlayServicesVersion}") {
        exclude module: 'support-v4'
    }
    compile("com.google.firebase:firebase-storage:${rootProject.ext.googlePlayServicesVersion}") {
        exclude module: 'support-v4'
    }
    compile('com.firebaseui:firebase-ui-storage:0.6.1') {
        exclude module: 'support-v4'
    }


    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.1.6'
    compile 'com.jakewharton.threetenabp:threetenabp:1.0.3'
    compile 'com.jakewharton.timber:timber:4.4.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'
}

// Grant animation permissions to avoid test failure because of ui sync.
task grantAnimationPermissions(type: Exec, dependsOn: 'installMock') {
    group = 'test'
    description = 'Grant permissions for testing.'

    def absolutePath = file('..') // Get project absolute path
    commandLine "$absolutePath/set_animation_permissions.sh org.bookdash.android".split(" ")
}

// Source: http://stackoverflow.com/q/29908110/112705
afterEvaluate {
    // When launching individual tests from Android Studio, it seems that only the assemble tasks
    // get called directly, not the install* versions
    tasks.each { task ->
        if (task.name.startsWith('assembleMockAndroidTest')) {
            task.dependsOn grantAnimationPermissions
        }
    }
}
/*
 * Workaround for https://code.google.com/p/android/issues/detail?id=182715
 *
 * The Android Gradle plugin is creating DataBindingExportBuildInfoTasks for the instrumentation
 * APK that generates from the app APKs layouts. This creates duplicate classes in the app and
 * instrumentation APK which leads to
 *      java.lang.IllegalAccessError: Class ref in pre-verified class resolved to unexpected implementation
 * on older devices.
 *
 * The workaround is to get the DataBindingExportBuildInfoTasks tasks for the instrumentation APK
 * and delete the files right after it creates them.
 */
tasks.withType(com.android.build.gradle.internal.tasks.databinding.DataBindingExportBuildInfoTask) { task ->
    if (task.name.endsWith("AndroidTest")) {
        task.finalizedBy(tasks.create("${task.name}Workaround") << {
            task.output.deleteDir()
        })
    }
}
apply plugin: 'com.google.gms.google-services'